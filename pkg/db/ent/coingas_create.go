// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/gas-feeder/pkg/db/ent/coingas"
	"github.com/google/uuid"
)

// CoinGasCreate is the builder for creating a CoinGas entity.
type CoinGasCreate struct {
	config
	mutation *CoinGasMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cgc *CoinGasCreate) SetCreatedAt(u uint32) *CoinGasCreate {
	cgc.mutation.SetCreatedAt(u)
	return cgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cgc *CoinGasCreate) SetNillableCreatedAt(u *uint32) *CoinGasCreate {
	if u != nil {
		cgc.SetCreatedAt(*u)
	}
	return cgc
}

// SetUpdatedAt sets the "updated_at" field.
func (cgc *CoinGasCreate) SetUpdatedAt(u uint32) *CoinGasCreate {
	cgc.mutation.SetUpdatedAt(u)
	return cgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cgc *CoinGasCreate) SetNillableUpdatedAt(u *uint32) *CoinGasCreate {
	if u != nil {
		cgc.SetUpdatedAt(*u)
	}
	return cgc
}

// SetDeletedAt sets the "deleted_at" field.
func (cgc *CoinGasCreate) SetDeletedAt(u uint32) *CoinGasCreate {
	cgc.mutation.SetDeletedAt(u)
	return cgc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cgc *CoinGasCreate) SetNillableDeletedAt(u *uint32) *CoinGasCreate {
	if u != nil {
		cgc.SetDeletedAt(*u)
	}
	return cgc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cgc *CoinGasCreate) SetCoinTypeID(u uuid.UUID) *CoinGasCreate {
	cgc.mutation.SetCoinTypeID(u)
	return cgc
}

// SetGasCoinTypeID sets the "gas_coin_type_id" field.
func (cgc *CoinGasCreate) SetGasCoinTypeID(u uuid.UUID) *CoinGasCreate {
	cgc.mutation.SetGasCoinTypeID(u)
	return cgc
}

// SetFeedingTid sets the "feeding_tid" field.
func (cgc *CoinGasCreate) SetFeedingTid(u uuid.UUID) *CoinGasCreate {
	cgc.mutation.SetFeedingTid(u)
	return cgc
}

// SetNillableFeedingTid sets the "feeding_tid" field if the given value is not nil.
func (cgc *CoinGasCreate) SetNillableFeedingTid(u *uuid.UUID) *CoinGasCreate {
	if u != nil {
		cgc.SetFeedingTid(*u)
	}
	return cgc
}

// SetDepositThresholdLow sets the "deposit_threshold_low" field.
func (cgc *CoinGasCreate) SetDepositThresholdLow(u uint64) *CoinGasCreate {
	cgc.mutation.SetDepositThresholdLow(u)
	return cgc
}

// SetDepositAmount sets the "deposit_amount" field.
func (cgc *CoinGasCreate) SetDepositAmount(u uint64) *CoinGasCreate {
	cgc.mutation.SetDepositAmount(u)
	return cgc
}

// SetOnlineScale sets the "online_scale" field.
func (cgc *CoinGasCreate) SetOnlineScale(i int32) *CoinGasCreate {
	cgc.mutation.SetOnlineScale(i)
	return cgc
}

// SetNillableOnlineScale sets the "online_scale" field if the given value is not nil.
func (cgc *CoinGasCreate) SetNillableOnlineScale(i *int32) *CoinGasCreate {
	if i != nil {
		cgc.SetOnlineScale(*i)
	}
	return cgc
}

// SetID sets the "id" field.
func (cgc *CoinGasCreate) SetID(u uuid.UUID) *CoinGasCreate {
	cgc.mutation.SetID(u)
	return cgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cgc *CoinGasCreate) SetNillableID(u *uuid.UUID) *CoinGasCreate {
	if u != nil {
		cgc.SetID(*u)
	}
	return cgc
}

// Mutation returns the CoinGasMutation object of the builder.
func (cgc *CoinGasCreate) Mutation() *CoinGasMutation {
	return cgc.mutation
}

// Save creates the CoinGas in the database.
func (cgc *CoinGasCreate) Save(ctx context.Context) (*CoinGas, error) {
	var (
		err  error
		node *CoinGas
	)
	if err := cgc.defaults(); err != nil {
		return nil, err
	}
	if len(cgc.hooks) == 0 {
		if err = cgc.check(); err != nil {
			return nil, err
		}
		node, err = cgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinGasMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cgc.check(); err != nil {
				return nil, err
			}
			cgc.mutation = mutation
			if node, err = cgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cgc.hooks) - 1; i >= 0; i-- {
			if cgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cgc *CoinGasCreate) SaveX(ctx context.Context) *CoinGas {
	v, err := cgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgc *CoinGasCreate) Exec(ctx context.Context) error {
	_, err := cgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgc *CoinGasCreate) ExecX(ctx context.Context) {
	if err := cgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cgc *CoinGasCreate) defaults() error {
	if _, ok := cgc.mutation.CreatedAt(); !ok {
		if coingas.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized coingas.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := coingas.DefaultCreatedAt()
		cgc.mutation.SetCreatedAt(v)
	}
	if _, ok := cgc.mutation.UpdatedAt(); !ok {
		if coingas.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coingas.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coingas.DefaultUpdatedAt()
		cgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cgc.mutation.DeletedAt(); !ok {
		if coingas.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized coingas.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := coingas.DefaultDeletedAt()
		cgc.mutation.SetDeletedAt(v)
	}
	if _, ok := cgc.mutation.FeedingTid(); !ok {
		if coingas.DefaultFeedingTid == nil {
			return fmt.Errorf("ent: uninitialized coingas.DefaultFeedingTid (forgotten import ent/runtime?)")
		}
		v := coingas.DefaultFeedingTid()
		cgc.mutation.SetFeedingTid(v)
	}
	if _, ok := cgc.mutation.OnlineScale(); !ok {
		v := coingas.DefaultOnlineScale
		cgc.mutation.SetOnlineScale(v)
	}
	if _, ok := cgc.mutation.ID(); !ok {
		if coingas.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized coingas.DefaultID (forgotten import ent/runtime?)")
		}
		v := coingas.DefaultID()
		cgc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cgc *CoinGasCreate) check() error {
	if _, ok := cgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CoinGas.created_at"`)}
	}
	if _, ok := cgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CoinGas.updated_at"`)}
	}
	if _, ok := cgc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "CoinGas.deleted_at"`)}
	}
	if _, ok := cgc.mutation.CoinTypeID(); !ok {
		return &ValidationError{Name: "coin_type_id", err: errors.New(`ent: missing required field "CoinGas.coin_type_id"`)}
	}
	if _, ok := cgc.mutation.GasCoinTypeID(); !ok {
		return &ValidationError{Name: "gas_coin_type_id", err: errors.New(`ent: missing required field "CoinGas.gas_coin_type_id"`)}
	}
	if _, ok := cgc.mutation.FeedingTid(); !ok {
		return &ValidationError{Name: "feeding_tid", err: errors.New(`ent: missing required field "CoinGas.feeding_tid"`)}
	}
	if _, ok := cgc.mutation.DepositThresholdLow(); !ok {
		return &ValidationError{Name: "deposit_threshold_low", err: errors.New(`ent: missing required field "CoinGas.deposit_threshold_low"`)}
	}
	if _, ok := cgc.mutation.DepositAmount(); !ok {
		return &ValidationError{Name: "deposit_amount", err: errors.New(`ent: missing required field "CoinGas.deposit_amount"`)}
	}
	if _, ok := cgc.mutation.OnlineScale(); !ok {
		return &ValidationError{Name: "online_scale", err: errors.New(`ent: missing required field "CoinGas.online_scale"`)}
	}
	return nil
}

func (cgc *CoinGasCreate) sqlSave(ctx context.Context) (*CoinGas, error) {
	_node, _spec := cgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cgc *CoinGasCreate) createSpec() (*CoinGas, *sqlgraph.CreateSpec) {
	var (
		_node = &CoinGas{config: cgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coingas.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coingas.FieldID,
			},
		}
	)
	_spec.OnConflict = cgc.conflict
	if id, ok := cgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cgc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coingas.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cgc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coingas.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cgc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coingas.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cgc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coingas.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := cgc.mutation.GasCoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coingas.FieldGasCoinTypeID,
		})
		_node.GasCoinTypeID = value
	}
	if value, ok := cgc.mutation.FeedingTid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coingas.FieldFeedingTid,
		})
		_node.FeedingTid = value
	}
	if value, ok := cgc.mutation.DepositThresholdLow(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: coingas.FieldDepositThresholdLow,
		})
		_node.DepositThresholdLow = value
	}
	if value, ok := cgc.mutation.DepositAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: coingas.FieldDepositAmount,
		})
		_node.DepositAmount = value
	}
	if value, ok := cgc.mutation.OnlineScale(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: coingas.FieldOnlineScale,
		})
		_node.OnlineScale = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinGas.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinGasUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cgc *CoinGasCreate) OnConflict(opts ...sql.ConflictOption) *CoinGasUpsertOne {
	cgc.conflict = opts
	return &CoinGasUpsertOne{
		create: cgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinGas.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cgc *CoinGasCreate) OnConflictColumns(columns ...string) *CoinGasUpsertOne {
	cgc.conflict = append(cgc.conflict, sql.ConflictColumns(columns...))
	return &CoinGasUpsertOne{
		create: cgc,
	}
}

type (
	// CoinGasUpsertOne is the builder for "upsert"-ing
	//  one CoinGas node.
	CoinGasUpsertOne struct {
		create *CoinGasCreate
	}

	// CoinGasUpsert is the "OnConflict" setter.
	CoinGasUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CoinGasUpsert) SetCreatedAt(v uint32) *CoinGasUpsert {
	u.Set(coingas.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinGasUpsert) UpdateCreatedAt() *CoinGasUpsert {
	u.SetExcluded(coingas.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinGasUpsert) AddCreatedAt(v uint32) *CoinGasUpsert {
	u.Add(coingas.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinGasUpsert) SetUpdatedAt(v uint32) *CoinGasUpsert {
	u.Set(coingas.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinGasUpsert) UpdateUpdatedAt() *CoinGasUpsert {
	u.SetExcluded(coingas.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinGasUpsert) AddUpdatedAt(v uint32) *CoinGasUpsert {
	u.Add(coingas.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinGasUpsert) SetDeletedAt(v uint32) *CoinGasUpsert {
	u.Set(coingas.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinGasUpsert) UpdateDeletedAt() *CoinGasUpsert {
	u.SetExcluded(coingas.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinGasUpsert) AddDeletedAt(v uint32) *CoinGasUpsert {
	u.Add(coingas.FieldDeletedAt, v)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinGasUpsert) SetCoinTypeID(v uuid.UUID) *CoinGasUpsert {
	u.Set(coingas.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinGasUpsert) UpdateCoinTypeID() *CoinGasUpsert {
	u.SetExcluded(coingas.FieldCoinTypeID)
	return u
}

// SetGasCoinTypeID sets the "gas_coin_type_id" field.
func (u *CoinGasUpsert) SetGasCoinTypeID(v uuid.UUID) *CoinGasUpsert {
	u.Set(coingas.FieldGasCoinTypeID, v)
	return u
}

// UpdateGasCoinTypeID sets the "gas_coin_type_id" field to the value that was provided on create.
func (u *CoinGasUpsert) UpdateGasCoinTypeID() *CoinGasUpsert {
	u.SetExcluded(coingas.FieldGasCoinTypeID)
	return u
}

// SetFeedingTid sets the "feeding_tid" field.
func (u *CoinGasUpsert) SetFeedingTid(v uuid.UUID) *CoinGasUpsert {
	u.Set(coingas.FieldFeedingTid, v)
	return u
}

// UpdateFeedingTid sets the "feeding_tid" field to the value that was provided on create.
func (u *CoinGasUpsert) UpdateFeedingTid() *CoinGasUpsert {
	u.SetExcluded(coingas.FieldFeedingTid)
	return u
}

// SetDepositThresholdLow sets the "deposit_threshold_low" field.
func (u *CoinGasUpsert) SetDepositThresholdLow(v uint64) *CoinGasUpsert {
	u.Set(coingas.FieldDepositThresholdLow, v)
	return u
}

// UpdateDepositThresholdLow sets the "deposit_threshold_low" field to the value that was provided on create.
func (u *CoinGasUpsert) UpdateDepositThresholdLow() *CoinGasUpsert {
	u.SetExcluded(coingas.FieldDepositThresholdLow)
	return u
}

// AddDepositThresholdLow adds v to the "deposit_threshold_low" field.
func (u *CoinGasUpsert) AddDepositThresholdLow(v uint64) *CoinGasUpsert {
	u.Add(coingas.FieldDepositThresholdLow, v)
	return u
}

// SetDepositAmount sets the "deposit_amount" field.
func (u *CoinGasUpsert) SetDepositAmount(v uint64) *CoinGasUpsert {
	u.Set(coingas.FieldDepositAmount, v)
	return u
}

// UpdateDepositAmount sets the "deposit_amount" field to the value that was provided on create.
func (u *CoinGasUpsert) UpdateDepositAmount() *CoinGasUpsert {
	u.SetExcluded(coingas.FieldDepositAmount)
	return u
}

// AddDepositAmount adds v to the "deposit_amount" field.
func (u *CoinGasUpsert) AddDepositAmount(v uint64) *CoinGasUpsert {
	u.Add(coingas.FieldDepositAmount, v)
	return u
}

// SetOnlineScale sets the "online_scale" field.
func (u *CoinGasUpsert) SetOnlineScale(v int32) *CoinGasUpsert {
	u.Set(coingas.FieldOnlineScale, v)
	return u
}

// UpdateOnlineScale sets the "online_scale" field to the value that was provided on create.
func (u *CoinGasUpsert) UpdateOnlineScale() *CoinGasUpsert {
	u.SetExcluded(coingas.FieldOnlineScale)
	return u
}

// AddOnlineScale adds v to the "online_scale" field.
func (u *CoinGasUpsert) AddOnlineScale(v int32) *CoinGasUpsert {
	u.Add(coingas.FieldOnlineScale, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CoinGas.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coingas.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinGasUpsertOne) UpdateNewValues() *CoinGasUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(coingas.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CoinGas.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CoinGasUpsertOne) Ignore() *CoinGasUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinGasUpsertOne) DoNothing() *CoinGasUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinGasCreate.OnConflict
// documentation for more info.
func (u *CoinGasUpsertOne) Update(set func(*CoinGasUpsert)) *CoinGasUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinGasUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CoinGasUpsertOne) SetCreatedAt(v uint32) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinGasUpsertOne) AddCreatedAt(v uint32) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinGasUpsertOne) UpdateCreatedAt() *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinGasUpsertOne) SetUpdatedAt(v uint32) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinGasUpsertOne) AddUpdatedAt(v uint32) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinGasUpsertOne) UpdateUpdatedAt() *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinGasUpsertOne) SetDeletedAt(v uint32) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinGasUpsertOne) AddDeletedAt(v uint32) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinGasUpsertOne) UpdateDeletedAt() *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinGasUpsertOne) SetCoinTypeID(v uuid.UUID) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinGasUpsertOne) UpdateCoinTypeID() *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetGasCoinTypeID sets the "gas_coin_type_id" field.
func (u *CoinGasUpsertOne) SetGasCoinTypeID(v uuid.UUID) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetGasCoinTypeID(v)
	})
}

// UpdateGasCoinTypeID sets the "gas_coin_type_id" field to the value that was provided on create.
func (u *CoinGasUpsertOne) UpdateGasCoinTypeID() *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateGasCoinTypeID()
	})
}

// SetFeedingTid sets the "feeding_tid" field.
func (u *CoinGasUpsertOne) SetFeedingTid(v uuid.UUID) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetFeedingTid(v)
	})
}

// UpdateFeedingTid sets the "feeding_tid" field to the value that was provided on create.
func (u *CoinGasUpsertOne) UpdateFeedingTid() *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateFeedingTid()
	})
}

// SetDepositThresholdLow sets the "deposit_threshold_low" field.
func (u *CoinGasUpsertOne) SetDepositThresholdLow(v uint64) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetDepositThresholdLow(v)
	})
}

// AddDepositThresholdLow adds v to the "deposit_threshold_low" field.
func (u *CoinGasUpsertOne) AddDepositThresholdLow(v uint64) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.AddDepositThresholdLow(v)
	})
}

// UpdateDepositThresholdLow sets the "deposit_threshold_low" field to the value that was provided on create.
func (u *CoinGasUpsertOne) UpdateDepositThresholdLow() *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateDepositThresholdLow()
	})
}

// SetDepositAmount sets the "deposit_amount" field.
func (u *CoinGasUpsertOne) SetDepositAmount(v uint64) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetDepositAmount(v)
	})
}

// AddDepositAmount adds v to the "deposit_amount" field.
func (u *CoinGasUpsertOne) AddDepositAmount(v uint64) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.AddDepositAmount(v)
	})
}

// UpdateDepositAmount sets the "deposit_amount" field to the value that was provided on create.
func (u *CoinGasUpsertOne) UpdateDepositAmount() *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateDepositAmount()
	})
}

// SetOnlineScale sets the "online_scale" field.
func (u *CoinGasUpsertOne) SetOnlineScale(v int32) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetOnlineScale(v)
	})
}

// AddOnlineScale adds v to the "online_scale" field.
func (u *CoinGasUpsertOne) AddOnlineScale(v int32) *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.AddOnlineScale(v)
	})
}

// UpdateOnlineScale sets the "online_scale" field to the value that was provided on create.
func (u *CoinGasUpsertOne) UpdateOnlineScale() *CoinGasUpsertOne {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateOnlineScale()
	})
}

// Exec executes the query.
func (u *CoinGasUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinGasCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinGasUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CoinGasUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CoinGasUpsertOne.ID is not supported by MySQL driver. Use CoinGasUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CoinGasUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CoinGasCreateBulk is the builder for creating many CoinGas entities in bulk.
type CoinGasCreateBulk struct {
	config
	builders []*CoinGasCreate
	conflict []sql.ConflictOption
}

// Save creates the CoinGas entities in the database.
func (cgcb *CoinGasCreateBulk) Save(ctx context.Context) ([]*CoinGas, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cgcb.builders))
	nodes := make([]*CoinGas, len(cgcb.builders))
	mutators := make([]Mutator, len(cgcb.builders))
	for i := range cgcb.builders {
		func(i int, root context.Context) {
			builder := cgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoinGasMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cgcb *CoinGasCreateBulk) SaveX(ctx context.Context) []*CoinGas {
	v, err := cgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgcb *CoinGasCreateBulk) Exec(ctx context.Context) error {
	_, err := cgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgcb *CoinGasCreateBulk) ExecX(ctx context.Context) {
	if err := cgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinGas.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinGasUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cgcb *CoinGasCreateBulk) OnConflict(opts ...sql.ConflictOption) *CoinGasUpsertBulk {
	cgcb.conflict = opts
	return &CoinGasUpsertBulk{
		create: cgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinGas.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cgcb *CoinGasCreateBulk) OnConflictColumns(columns ...string) *CoinGasUpsertBulk {
	cgcb.conflict = append(cgcb.conflict, sql.ConflictColumns(columns...))
	return &CoinGasUpsertBulk{
		create: cgcb,
	}
}

// CoinGasUpsertBulk is the builder for "upsert"-ing
// a bulk of CoinGas nodes.
type CoinGasUpsertBulk struct {
	create *CoinGasCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CoinGas.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coingas.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinGasUpsertBulk) UpdateNewValues() *CoinGasUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(coingas.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CoinGas.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CoinGasUpsertBulk) Ignore() *CoinGasUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinGasUpsertBulk) DoNothing() *CoinGasUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinGasCreateBulk.OnConflict
// documentation for more info.
func (u *CoinGasUpsertBulk) Update(set func(*CoinGasUpsert)) *CoinGasUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinGasUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CoinGasUpsertBulk) SetCreatedAt(v uint32) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinGasUpsertBulk) AddCreatedAt(v uint32) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinGasUpsertBulk) UpdateCreatedAt() *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinGasUpsertBulk) SetUpdatedAt(v uint32) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinGasUpsertBulk) AddUpdatedAt(v uint32) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinGasUpsertBulk) UpdateUpdatedAt() *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinGasUpsertBulk) SetDeletedAt(v uint32) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinGasUpsertBulk) AddDeletedAt(v uint32) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinGasUpsertBulk) UpdateDeletedAt() *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinGasUpsertBulk) SetCoinTypeID(v uuid.UUID) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinGasUpsertBulk) UpdateCoinTypeID() *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetGasCoinTypeID sets the "gas_coin_type_id" field.
func (u *CoinGasUpsertBulk) SetGasCoinTypeID(v uuid.UUID) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetGasCoinTypeID(v)
	})
}

// UpdateGasCoinTypeID sets the "gas_coin_type_id" field to the value that was provided on create.
func (u *CoinGasUpsertBulk) UpdateGasCoinTypeID() *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateGasCoinTypeID()
	})
}

// SetFeedingTid sets the "feeding_tid" field.
func (u *CoinGasUpsertBulk) SetFeedingTid(v uuid.UUID) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetFeedingTid(v)
	})
}

// UpdateFeedingTid sets the "feeding_tid" field to the value that was provided on create.
func (u *CoinGasUpsertBulk) UpdateFeedingTid() *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateFeedingTid()
	})
}

// SetDepositThresholdLow sets the "deposit_threshold_low" field.
func (u *CoinGasUpsertBulk) SetDepositThresholdLow(v uint64) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetDepositThresholdLow(v)
	})
}

// AddDepositThresholdLow adds v to the "deposit_threshold_low" field.
func (u *CoinGasUpsertBulk) AddDepositThresholdLow(v uint64) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.AddDepositThresholdLow(v)
	})
}

// UpdateDepositThresholdLow sets the "deposit_threshold_low" field to the value that was provided on create.
func (u *CoinGasUpsertBulk) UpdateDepositThresholdLow() *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateDepositThresholdLow()
	})
}

// SetDepositAmount sets the "deposit_amount" field.
func (u *CoinGasUpsertBulk) SetDepositAmount(v uint64) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetDepositAmount(v)
	})
}

// AddDepositAmount adds v to the "deposit_amount" field.
func (u *CoinGasUpsertBulk) AddDepositAmount(v uint64) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.AddDepositAmount(v)
	})
}

// UpdateDepositAmount sets the "deposit_amount" field to the value that was provided on create.
func (u *CoinGasUpsertBulk) UpdateDepositAmount() *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateDepositAmount()
	})
}

// SetOnlineScale sets the "online_scale" field.
func (u *CoinGasUpsertBulk) SetOnlineScale(v int32) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.SetOnlineScale(v)
	})
}

// AddOnlineScale adds v to the "online_scale" field.
func (u *CoinGasUpsertBulk) AddOnlineScale(v int32) *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.AddOnlineScale(v)
	})
}

// UpdateOnlineScale sets the "online_scale" field to the value that was provided on create.
func (u *CoinGasUpsertBulk) UpdateOnlineScale() *CoinGasUpsertBulk {
	return u.Update(func(s *CoinGasUpsert) {
		s.UpdateOnlineScale()
	})
}

// Exec executes the query.
func (u *CoinGasUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CoinGasCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinGasCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinGasUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
