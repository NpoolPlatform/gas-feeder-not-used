// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/gas-feeder/pkg/db/ent/coingas"
	"github.com/google/uuid"
)

// CoinGas is the model entity for the CoinGas schema.
type CoinGas struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// GasCoinTypeID holds the value of the "gas_coin_type_id" field.
	GasCoinTypeID uuid.UUID `json:"gas_coin_type_id,omitempty"`
	// FeedingTid holds the value of the "feeding_tid" field.
	FeedingTid uuid.UUID `json:"feeding_tid,omitempty"`
	// DepositThresholdLow holds the value of the "deposit_threshold_low" field.
	DepositThresholdLow uint64 `json:"deposit_threshold_low,omitempty"`
	// DepositAmount holds the value of the "deposit_amount" field.
	DepositAmount uint64 `json:"deposit_amount,omitempty"`
	// OnlineScale holds the value of the "online_scale" field.
	OnlineScale int32 `json:"online_scale,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CoinGas) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case coingas.FieldCreatedAt, coingas.FieldUpdatedAt, coingas.FieldDeletedAt, coingas.FieldDepositThresholdLow, coingas.FieldDepositAmount, coingas.FieldOnlineScale:
			values[i] = new(sql.NullInt64)
		case coingas.FieldID, coingas.FieldCoinTypeID, coingas.FieldGasCoinTypeID, coingas.FieldFeedingTid:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CoinGas", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CoinGas fields.
func (cg *CoinGas) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coingas.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cg.ID = *value
			}
		case coingas.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cg.CreatedAt = uint32(value.Int64)
			}
		case coingas.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cg.UpdatedAt = uint32(value.Int64)
			}
		case coingas.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cg.DeletedAt = uint32(value.Int64)
			}
		case coingas.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				cg.CoinTypeID = *value
			}
		case coingas.FieldGasCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field gas_coin_type_id", values[i])
			} else if value != nil {
				cg.GasCoinTypeID = *value
			}
		case coingas.FieldFeedingTid:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field feeding_tid", values[i])
			} else if value != nil {
				cg.FeedingTid = *value
			}
		case coingas.FieldDepositThresholdLow:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deposit_threshold_low", values[i])
			} else if value.Valid {
				cg.DepositThresholdLow = uint64(value.Int64)
			}
		case coingas.FieldDepositAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deposit_amount", values[i])
			} else if value.Valid {
				cg.DepositAmount = uint64(value.Int64)
			}
		case coingas.FieldOnlineScale:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field online_scale", values[i])
			} else if value.Valid {
				cg.OnlineScale = int32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CoinGas.
// Note that you need to call CoinGas.Unwrap() before calling this method if this CoinGas
// was returned from a transaction, and the transaction was committed or rolled back.
func (cg *CoinGas) Update() *CoinGasUpdateOne {
	return (&CoinGasClient{config: cg.config}).UpdateOne(cg)
}

// Unwrap unwraps the CoinGas entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cg *CoinGas) Unwrap() *CoinGas {
	tx, ok := cg.config.driver.(*txDriver)
	if !ok {
		panic("ent: CoinGas is not a transactional entity")
	}
	cg.config.driver = tx.drv
	return cg
}

// String implements the fmt.Stringer.
func (cg *CoinGas) String() string {
	var builder strings.Builder
	builder.WriteString("CoinGas(")
	builder.WriteString(fmt.Sprintf("id=%v", cg.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", cg.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", cg.UpdatedAt))
	builder.WriteString(", deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", cg.DeletedAt))
	builder.WriteString(", coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", cg.CoinTypeID))
	builder.WriteString(", gas_coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", cg.GasCoinTypeID))
	builder.WriteString(", feeding_tid=")
	builder.WriteString(fmt.Sprintf("%v", cg.FeedingTid))
	builder.WriteString(", deposit_threshold_low=")
	builder.WriteString(fmt.Sprintf("%v", cg.DepositThresholdLow))
	builder.WriteString(", deposit_amount=")
	builder.WriteString(fmt.Sprintf("%v", cg.DepositAmount))
	builder.WriteString(", online_scale=")
	builder.WriteString(fmt.Sprintf("%v", cg.OnlineScale))
	builder.WriteByte(')')
	return builder.String()
}

// CoinGasSlice is a parsable slice of CoinGas.
type CoinGasSlice []*CoinGas

func (cg CoinGasSlice) config(cfg config) {
	for _i := range cg {
		cg[_i].config = cfg
	}
}
